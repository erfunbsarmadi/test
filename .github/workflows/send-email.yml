name: Send Outlook Email via Microsoft Graph

on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * *"  # every day at 09:00 UTC

jobs:
  send:
    runs-on: ubuntu-latest

    env:
      MSAL_CACHE_JSON: ${{ secrets.MSAL_CACHE_JSON }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      NEW_GMAIL_CREDENTIALS_JSON: ${{ secrets.NEW_GMAIL_CREDENTIALS_JSON }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      EMAIL_BODY: ${{ secrets.EMAIL_BODY }}
      COMPOSITION_PROMPT: ${{ secrets.COMPOSITION_PROMPT }}
      SUBJECT_SUGGESTION: ${{ secrets.SUBJECT_SUGGESTION }}
      COMPOSE_REMINDER: ${{ secrets.COMPOSE_REMINDER }}
      CLARITY_PROMPT: ${{ secrets.CLARITY_PROMPT }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Write credentials from secrets
        run: |
          echo "$MSAL_CACHE_JSON" > msal_cache.json
          echo "$NEW_GMAIL_CREDENTIALS_JSON" > credentials.json

          # snippet: include this before your "Send email and process files" step
      - name: Restore Telegram update_id cache
        uses: actions/cache@v4
        id: updateid-cache
        with:
          path: update_id.txt
          # Unique key per run so saving always happens on cache-miss
          key: telegram-update-${{ runner.os }}-v1-${{ github.run_number }}
          # Fallback: restore the most recent cache that starts with this prefix
          restore-keys: |
            telegram-update-${{ runner.os }}-v1-

      - name: Send email and process files
        run: |
          python main.py

  randomize-cron:
    runs-on: ubuntu-latest
    needs: send
    steps:
      - uses: actions/checkout@v4

      - name: Generate random time
        id: random
        run: |
          HOUR=$((RANDOM % 24))
          MINUTE=$((RANDOM % 60))
          echo "hour=$HOUR" >> $GITHUB_OUTPUT
          echo "minute=$MINUTE" >> $GITHUB_OUTPUT

      - name: Update cron in workflow
        run: |
          OLD_CRON=$(grep -E "cron:" .github/workflows/main.yml)
          NEW_CRON="    - cron: \"${{ steps.random.outputs.minute }} ${{ steps.random.outputs.hour }} * * *\""
          echo "Old cron: $OLD_CRON"
          echo "New cron: $NEW_CRON"
          sed -i "s|$OLD_CRON|$NEW_CRON|" .github/workflows/main.yml

      - name: Commit and push new cron
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add .github/workflows/main.yml
          git commit -m "Update cron schedule to random time"
          git push
