name: Send Outlook Email via Microsoft Graph

on:
  workflow_dispatch:
  schedule:
    - cron: "23 18 1 * *"
    - cron: "48 16 2 * *"
    - cron: "10 15 3 * *"
    - cron: "27 2 4 * *"
    - cron: "33 14 5 * *"
    - cron: "6 8 6 * *"
    - cron: "40 14 7 * *"
    - cron: "28 18 8 * *"
    - cron: "2 23 9 * *"
    - cron: "9 18 10 * *"
    - cron: "33 9 11 * *"
    - cron: "5 4 12 * *"
    - cron: "23 22 13 * *"
    - cron: "39 7 14 * *"
    - cron: "24 16 15 * *"
    - cron: "52 5 16 * *"
    - cron: "6 16 17 * *"
    - cron: "11 5 18 * *"
    - cron: "45 6 19 * *"
    - cron: "3 16 20 * *"
    - cron: "25 0 21 * *"
    - cron: "11 22 22 * *"
    - cron: "35 5 23 * *"
    - cron: "14 10 24 * *"
    - cron: "19 21 25 * *"
    - cron: "12 15 26 * *"
    - cron: "9 11 27 * *"
    - cron: "23 11 28 * *"
    - cron: "15 12 29 * *"
    - cron: "13 23 30 * *"
    - cron: "36 9 31 * *"

jobs:
  send:
    runs-on: ubuntu-latest

    env:
      MSAL_CACHE_JSON: ${{ secrets.MSAL_CACHE_JSON }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      NEW_GMAIL_CREDENTIALS_JSON: ${{ secrets.NEW_GMAIL_CREDENTIALS_JSON }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      EMAIL_BODY: ${{ secrets.EMAIL_BODY }}
      COMPOSITION_PROMPT: ${{ secrets.COMPOSITION_PROMPT }}
      SUBJECT_SUGGESTION: ${{ secrets.SUBJECT_SUGGESTION }}
      COMPOSE_REMINDER: ${{ secrets.COMPOSE_REMINDER }}
      CLARITY_PROMPT: ${{ secrets.CLARITY_PROMPT }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Write credentials from secrets
        run: |
          echo "$MSAL_CACHE_JSON" > msal_cache.json
          echo "$NEW_GMAIL_CREDENTIALS_JSON" > credentials.json

          # snippet: include this before your "Send email and process files" step
      - name: Restore Telegram update_id cache
        uses: actions/cache@v4
        id: updateid-cache
        with:
          path: update_id.txt
          # Unique key per run so saving always happens on cache-miss
          key: telegram-update-${{ runner.os }}-v1-${{ github.run_number }}
          # Fallback: restore the most recent cache that starts with this prefix
          restore-keys: |
            telegram-update-${{ runner.os }}-v1-

      - name: Send email and process files
        run: |
          python main.py

      - name: Trigger cron update
        if: success()
        run: |
          echo "Triggering update-cron.yml..."
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/erfunbsarmadi/test/actions/workflows/update-cron.yml/dispatches \
            -d '{"ref":"main"}'
